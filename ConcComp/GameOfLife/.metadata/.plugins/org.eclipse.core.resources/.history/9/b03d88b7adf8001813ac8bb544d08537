// COMS20001 - Cellular Automaton Farm - Initial Code Skeleton
// (using the XMOS i2c accelerometer demo code)

#include <platform.h>
#include <xs1.h>
#include <math.h>
#include <limits.h>
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include "gpio.h"
#include "pgmIO.h"
#include "i2c.h"

typedef unsigned char uchar;      //using uchar as shorthand

#define  IMHT 128               //image height
#define  IMWD 128               //image width
#define noWorkers 8              //number of clients

typedef interface i {
    [[clears_notification]]
    int communicate(int liveBitCount);
    void update(int instruction, uchar rows[IMHT/noWorkers + 2][IMWD/8]);
    [[notification]] slave void serverReady();
} i;

char infname[] = "128x128.pgm";     //put your input image path here
char outfname[] = "testout.pgm"; //put your output image path here

on tile[0]: in port explorer_buttons = XS1_PORT_4E;
on tile[0]: out port explorer_leds = XS1_PORT_4F;

on tile[0]: port p_scl = XS1_PORT_1E;         //interface ports to orientation
on tile [0]: port p_sda = XS1_PORT_1F;

#define FXOS8700EQ_I2C_ADDR 0x1E  //register addresses for orientation
#define FXOS8700EQ_XYZ_DATA_CFG_REG 0x0E
#define FXOS8700EQ_CTRL_REG_1 0x2A
#define FXOS8700EQ_DR_STATUS 0x0
#define FXOS8700EQ_OUT_X_MSB 0x1
#define FXOS8700EQ_OUT_X_LSB 0x2
#define FXOS8700EQ_OUT_Y_MSB 0x3
#define FXOS8700EQ_OUT_Y_LSB 0x4
#define FXOS8700EQ_OUT_Z_MSB 0x5
#define FXOS8700EQ_OUT_Z_LSB 0x6



int getBit(uchar c, int location);

/////////////////////////////////////////////////////////////////////////////////////////
//
// Read Image from PGM file from path infname[] to channel c_out
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataInStream(char infname[], chanend c_out)
{
  int res;
  uchar line[ IMWD ];
  printf( "DataInStream: Start...\n" );

  if (IMHT <= 512) {
      //Open PGM file
      res = _openinpgm( infname, IMWD, IMHT );
      if( res ) {
        printf( "DataInStream: Error openening %s\n.", infname );
        return;
      }

      //Read image line-by-line and send byte by byte to channel c_out
      for( int y = 0; y < IMHT; y++ ) {
        _readinline( line, IMWD );
        for( int x = 0; x < IMWD; x++ ) {
            if (line[x] == 0xFF) c_out <: 1;
            else c_out <: 0;
    //      printf( "-%4.1d ", line[ x ] ); //show image values
        }
        if (y % 100 == 0) printf( "DataInStream: 100 Lines read...\n" );
    //    printf("%d\n", y);
    //    printf( "\n" );
      }

      //Close PGM image file
      _closeinpgm();
  } else {
      for( int y = 0; y < IMHT; y++ ) {
              for( int x = 0; x < IMWD; x++ ) {
                  if (rand() % 100 < 74) c_out <: 0;
                  else c_out <: 1;
              }
      }
  }
  printf( "DataInStream: Done...\n" );
  return;
}

void emptyChar(uchar val[IMHT][IMWD/8]) {
    for (int y = 0; y < IMHT; y++) for (int x = 0; x < IMWD/8; x++) val[y][x] = 0x00;
}

int mod(int x, int m) {
//    if (x == m) x = 0;
    if (x == -1) x = m-1;
    while (x < 0) x += m;
    return x % m;
}

/**
 * Function to check if given bit is live or dead.
 */
int checkNeighbourBit(int x, int y, uchar check[IMHT/4 + 2][IMWD/8]) {
    int arrayAddressX = mod(x, IMWD);
    int arrayAddressY = mod(y, IMHT / 4 + 2);
    int loc = (int)floor(arrayAddressX/8);
    x = mod(x, 8);
    //What it should do:
    //Take the correct position array, we get this above, and right shift the character by the correct ammount of bits
    //for checking. -1 should give x = 7 which gives a shift of 8 - x+1 = 0, while say 16 should give x=0 and
    //a shift of 8 - x+1 = 7 to check the leftmost bit in the character (we consider this the first bit)
    return getBit(check[arrayAddressY][loc], mod((8 - (x + 1)), 8));
}

uchar packBit(uchar c, int val, int location) {
    if (val == 1) c |= 1 << location;
    else {
        char d = 0xFF; //More efficient way for ding this?
        d ^= 1 << location;
        c &= d;
    }
    return c;
}

//Gets correct bit
int getBit(uchar c, int location) {
    int bit = (c >> location) & 1;
    return bit;
}

void printBits(uchar c) {
    for (int i = 7; i >= 0; i--) {
        int x = (c >> i) & 1;
        printf("%d ", x);
    }
}

int checkNeighbours(int y, int x, uchar board[IMHT/noWorkers + 2][IMWD/8], uchar output[IMHT/noWorkers + 2][IMWD/8], int index) {
    int count = 0;

    if (getBit(board[mod(y, IMHT/noWorkers + 2)][(int) floor ((mod((x - 1), IMWD))/ 8)], mod((8 - (x + 1 - 1)), 8))) count++;
    if (getBit(board[mod(y, IMHT/noWorkers + 2)][(int) floor ((mod((x + 1), IMWD)/ 8))], mod((8 - (x + 1 + 1)), 8))) count++;
    if (getBit(board[mod(y - 1, IMHT/noWorkers + 2)][(int) floor ((mod((x - 1), IMWD)/ 8))], mod((8 - (x + 1 - 1)), 8))) count++;
    if (getBit(board[mod(y - 1, IMHT/noWorkers + 2)][(int) floor ((mod((x + 1), IMWD)/ 8))], mod((8 - (x + 1 + 1)), 8))) count++;
    if (getBit(board[mod(y - 1, IMHT/noWorkers + 2)][(int) floor ((mod((x), IMWD)/ 8))], mod((8 - (x + 1)), 8))) count++;
    if (getBit(board[mod(y + 1, IMHT/noWorkers + 2)][(int) floor ((mod((x - 1), IMWD)/ 8))], mod((8 - (x + 1 - 1)), 8))) count++;
    if (getBit(board[mod(y + 1, IMHT/noWorkers + 2)][(int) floor ((mod((x + 1), IMWD)/ 8))], mod((8 - (x + 1 + 1)), 8))) count++;
    if (getBit(board[mod(y + 1, IMHT/noWorkers + 2)][(int) floor ((mod((x), IMWD)/ 8))], mod((8 - (x + 1)), 8))) count++;

    if (count < 2 || count > 3) output[y][(int) floor (x / 8)] = packBit(output[y][(int) floor (x / 8)], 0, mod((8 - (x + 1)), 8));
    else if (count == 2) output[y][(int) floor (x / 8)] = packBit(output[y][(int) floor (x / 8)], getBit(board[y][(int) floor (x / 8)], mod((8 - (x + 1)), 8)), mod((8 - (x + 1)), 8));
    else if (count == 3) output[y][(int) floor (x / 8)] = packBit(output[y][(int) floor (x / 8)], 1, mod((8 - (x + 1)), 8));

    return getBit(board[mod(y, IMHT/noWorkers + 2)][(int) floor ((mod((x), IMWD))/ 8)], mod((8 - (x + 1)), 8));
}



void rowClient(client interface i rowClient, int index, streaming chanend c_up, streaming chanend c_down) {
    uchar rows[IMHT/noWorkers + 2][IMWD/8];
    uchar output[IMHT/noWorkers + 2][IMWD/8];
    int liveBitCount = 0;
    int firstRound = 1;
    int load = 1;
    while (1) {
        select {
            case rowClient.serverReady() :
                int response = rowClient.communicate(liveBitCount);
                if (response != 2) rowClient.update(response, rows);
             break;
            default :
                for (int row = 1; row < (IMHT / noWorkers) + 1; row++) {
                    for (int col = 0; col < IMWD; col++) {
                        liveBitCount += checkNeighbours(row, col, rows, output, index);
                    }
                }
                for (int r = 1; r < (IMHT/noWorkers + 1); r++) {
                    memcpy(&rows[r], &output[r], (IMWD/8));
                }
                for (int c = 0; c < (IMWD/8); c++) {
                   c_down <: rows[IMHT/noWorkers][c];
                   c_up <: rows[1][c];
                   c_up :> rows[0][c];
                   c_down :> rows[IMHT/noWorkers + 1][c];
                }
                liveBitCount = 0;
                break;
        }
    }
}



/////////////////////////////////////////////////////////////////////////////////////////
//
// Start your implementation by changing this function to implement the game of life
// by farming out parts of the image to worker threads who implement it...
// Currently the function just inverts the image
//
/////////////////////////////////////////////////////////////////////////////////////////
void distributor(chanend c_in, chanend c_out, chanend fromAcc, chanend fromIO, chanend fromTime,
                    server i rowServer[noWorkers], client output_gpio_if led_green,
                    client output_gpio_if rgb_led_blue, client output_gpio_if rgb_led_green,
                    client output_gpio_if rgb_led_red) {
  int loaded = 0;
  int pause = 0;
  unsigned int green_led_state = 0;
  int read;
  int expFlag = 0;
  int processing = 0;
  uchar val[IMHT][IMWD/8];
  unsigned int startRound, endRound;
  timer t;

  emptyChar(val);//Set characters to all 0 bit
  //Starting up and wait for tilting of the xCore-200 Explorer
  printf( "ProcessImage: Start, size = %dx%d\n", IMHT, IMWD );
  while (processing != 1) {
      fromIO <: 1;
      fromIO :> processing; //if 1 is recieved begin reading and processing, otherwise wait
      if (processing == 2) {
          printf("Can't export image until image is loaded\n");
      }
  }
  fromTime <: 1;
  green_led_state = !green_led_state;
  led_green.output(green_led_state);

  //Read in and do something with your image values..
  //This just inverts every pixel, but you should
  //change the image according to the "Game of Life"
  for (int y = 0; y < IMHT; y++) { //Works
          for (int i = 0; i < (int)ceil(IMWD/8); i++)
              for (int x = 7; x >= 0; x--) {
                  c_in :> read;
                  val[y][i] = packBit(val[y][i], read, x);
              }
  }

  for (int i = 0; i < noWorkers; i++) {
            rowServer[i].serverReady();
  }
  int loadWorkers = 0;
  int expWorkers = 0;
  int roundCount = 0;
  int totalLiveBits = 0;

  while (processing) {
      t:>startRound;
      while (expWorkers < noWorkers) {

          [[ordered]]
          select {
              case communicate[int cId].load(int liveBitCount) -> int instruction :
                  totalLiveBits += liveBitCount;
                  if (loaded == 0) {
                      loaded = 1;
                      instruction = 1; //1 Indicating that row client should load
                  }
                  if (pause) {
                      expWorkers++;
                      float result;
                      fromTime <: 0;
                      fromTime :> result;
                      rgb_led_red.output(1);
                      if (expWorkers == noWorkers) printf("Rounds Processed: %d, Live bits: %d, Seconds Elapsed: %f\n", roundCount, totalLiveBits, result);
                      while (read) {
                        fromAcc :> read;
                      }
                      rgb_led_red.output(0);
                      pause = 0;
                      expWorkers = 0;
                      instruction == 2;//2 indicates client shouldn't do anything
                  }
                  if (expFlag) instruction == 3;//3 indicating that row client should export
                  break;

              case update[int cId].exp(int instruction, uchar rows[IMHT/noWorkers + 2][IMWD/8]) :
                    if (instruction == 1) {
                        for (int r = 0; r < (IMHT/noWorkers + 2); r++) { //DO A FOR LOOP ITERATING THROUG HEACH ROW OF BOARD WITH MEMCPY
                            memcpy(&rows[r], &val[mod((cId * (IMHT/noWorkers) - 1 + r), IMHT)], (IMWD/8));
                        }
                    }
                    if (instruction == 3) {
                        for (int r = 1; r < (IMHT/noWorkers + 1); r++) { //DO A FOR LOOP ITERATING THROUGH EACH ROW OF BOARD WITH MEMCPY
                            memcpy(&val[mod((cId * (IMHT/noWorkers) - 1 + r), IMHT)], &rows[r], (IMWD/8));
                        }
                        processing = 0;
                        expWorkers++;
                    }
                  break;
          }
      }
      loadWorkers = 0;
      expWorkers = 0;
      roundCount++;
      if (processing != 0) fromAcc :> read;
      if (read) {
            t :> endRound;
            printf( "\nProcessing %d round completed... Took %f secs\n",roundCount , (float)(endRound - startRound)/100000000);
            for (int i = 0; i < noWorkers; i++) {
                rowServer[i].serverReady();
            }
            pause == 1;
      }
      totalLiveBits = 0;
      if (processing != 0) {
          fromIO <: 1;
          fromIO :> read;
          if (read == 2) {
               led_green.output(0);
               rgb_led_blue.output(1);
               expFlag = 1;
               for (int i = 0; i < noWorkers; i++) {
                   rowServer[i].serverReady();
               }
          } else {
               green_led_state = 1 - green_led_state;
               led_green.output(green_led_state);
          }
      }
  }


  for( int y = 0; y < IMHT; y++ ) {   //go through all lines
           for( int x = 0; x < IMWD; x++ ) { //go through each pixel per line
               if (getBit(val[y][(int)(floor(x/8))], mod((8 - (x+1)), 8)) == 1) c_out <: 1;
               else c_out <: 0;
           }
         }
}


/////////////////////////////////////////////////////////////////////////////////////////
//
// Write pixel stream from channel c_in to PGM image file
//
/////////////////////////////////////////////////////////////////////////////////////////
void DataOutStream(char outfname[], chanend c_in)
{
  int inc;
  int res;
  uchar line[ IMWD ];

  //Open PGM file
  printf( "DataOutStream: Start...\n" );
  res = _openoutpgm( outfname, IMWD, IMHT );
  if( res ) {
    printf( "DataOutStream: Error opening %s\n.", outfname );
    return;
  }

  //Compile each line of the image and write the image line-by-line
  for( int y = 0; y < IMHT; y++ ) {
    for( int x = 0; x < IMWD; x++ ) {
      c_in :> inc;
      if (inc == 1) line[x] = 0xFF;
      else line[x] = 0x00;
    }
    _writeoutline( line, IMWD );
    if (y % 100 == 0) printf( "DataOutStream: 100 Lines written...\n" );
  }

  //Close the PGM image
  _closeoutpgm();
  printf( "DataOutStream: Done...\n" );
  return;
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Initialise and  read orientation, send first tilt event to channel
//
/////////////////////////////////////////////////////////////////////////////////////////
void orientation( client interface i2c_master_if i2c, chanend toDist) {
  i2c_regop_res_t result;
  char status_data = 0;

  // Configure FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_XYZ_DATA_CFG_REG, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }
  
  // Enable FXOS8700EQ
  result = i2c.write_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_CTRL_REG_1, 0x01);
  if (result != I2C_REGOP_SUCCESS) {
    printf("I2C write reg failed\n");
  }

  //Probe the orientation x-axis forever
  //Probe the orientation x-axis forever
  while (1) {
      //check until new orientation data is available
      status_data = i2c.read_reg(FXOS8700EQ_I2C_ADDR, FXOS8700EQ_DR_STATUS, result);
      //get new x and y axis tilt values
      int x = read_acceleration(i2c, FXOS8700EQ_OUT_X_MSB);
      int y = read_acceleration(i2c, FXOS8700EQ_OUT_Y_MSB);
      if ((x > 10 || x < -10) || (y > 10 || y < -10)) { //if x or y is too far off horizontal, send a 1 indicating a pause should start
          toDist <: 1;
      } else { //Send a 0 indicating not to pause or to end the pause
          toDist <: 0;
      }
  }
}

void timing(chanend timeOut) {
    //PROBABLY IN NEED OF TOTAL REWRITE
    unsigned int overflowCount = 0; //counts how many times overflow has occurred (number of times INT)MAX ticks have happened roughly)
    unsigned int flag = 0;
    unsigned int lastTime;
    unsigned int time = 0;
    unsigned int startTime = 0;
    timer t;
    while (1) {
        select {
            case timeOut :> int read :
                if (read == 1) {
                    overflowCount = 0;
                    t :> startTime;
                    flag = 1;
                    time = startTime;
                    lastTime = startTime;
                    read = 2;
                } else if (read == 0) {
                    float result;
                    result = (float) overflowCount * (UINT_MAX / 100000000);
                    if (overflowCount != 0) {
                        result -= (float) startTime / 100000000;
                        result += (float) time / 100000000;
                    } else result = (float) (time - startTime) / 100000000;
                    timeOut <: result;
                }
                break;
            default :
                t :> time;
                if (flag && time < lastTime) overflowCount++;
                lastTime = time;
                break;
        }
    }
}

//GPIO code built using: https://www.xmos.com/developer/download/private/AN00155%3A-xCORE-200-explorer---Simple-GPIO%281.0.1rc1%29.pdf
//May need to reference
void gpio_handler(client input_gpio_if button_1, client input_gpio_if button_2, chanend c_out) {
    // Initial button event state, active low
    button_1.event_when_pins_eq(0);
    button_2.event_when_pins_eq(0);
    int output = 0;
    int ready = 0;
    while (1) {
        select {
            case button_1.event():
                if (button_1.input() == 0) {
                    if (output != 2) output = 1;
                    // Set button event state to active high for debounce
                    button_1.event_when_pins_eq(1);
                } else {
                    // Debounce button
                    delay_milliseconds(50);
                    button_1.event_when_pins_eq(0);
                }
                break;
            case button_2.event():
                            if (button_2.input() == 0) {
                                output = 2;
                                // Set button event state to active high for debounce
                                button_2.event_when_pins_eq(1);
                            } else {
                                // Debounce button
                                delay_milliseconds(50);
                                button_2.event_when_pins_eq(0);
                            }
                            break;
            default:
                break;
        }
        select {
            case c_out :> ready:
                if (ready)  {
                    c_out <: output;
                    output = 0;
                }
                break;
            default:
                break;
        }
    }
}

/////////////////////////////////////////////////////////////////////////////////////////
//
// Orchestrate concurrent system and start up all threads
//
/////////////////////////////////////////////////////////////////////////////////////////
int main(void) {

input_gpio_if i_explorer_buttons[2];
output_gpio_if i_explorer_leds[4];

i2c_master_if i2c[1];               //interface to orientation


chan c_inIO, c_outIO, c_control, c_gpio, c_time;    //extend your channel definitions here
streaming chan c_Client[noWorkers];
interface i rowClientInterface[noWorkers];

par {
    on tile[1] : timing(c_time);
    on tile[0] : i2c_master(i2c, 1, p_scl, p_sda, 10);   //server thread providing orientation data
    on tile[0] : orientation(i2c[0],c_control);        //client thread reading orientation data
    on tile[0] : gpio_handler(i_explorer_buttons[0], i_explorer_buttons[1], c_gpio); //Handler thread handling IO data
    on tile[0] : input_gpio_with_events(i_explorer_buttons, 2, explorer_buttons, null);
    on tile[0] : output_gpio(i_explorer_leds, 4, explorer_leds, null);
    on tile[0] : DataInStream(infname, c_inIO);          //thread to read in a PGM image
    on tile[0] : DataOutStream(outfname, c_outIO);       //thread to write out a PGM image
    on tile[0] : distributor(c_inIO, c_outIO, c_control, c_gpio, c_time, rowClientInterface, i_explorer_leds[0],
                                i_explorer_leds[1],i_explorer_leds[2], i_explorer_leds[3]); //thread to coordinate work on image
    on tile[0] : rowClient(rowClientInterface[0], 0, c_Client[0], c_Client[1]);
    on tile[0] : rowClient(rowClientInterface[1], 1, c_Client[1], c_Client[2]);
    on tile[1] : rowClient(rowClientInterface[2], 2, c_Client[2], c_Client[3]);
    on tile[1] : rowClient(rowClientInterface[3], 3, c_Client[3], c_Client[4]);
    on tile[1] : rowClient(rowClientInterface[4], 4, c_Client[4], c_Client[5]);
    on tile[1] : rowClient(rowClientInterface[5], 5, c_Client[5], c_Client[6]);
    on tile[1] : rowClient(rowClientInterface[6], 6, c_Client[6], c_Client[7]);
    on tile[1] : rowClient(rowClientInterface[7], 7, c_Client[7], c_Client[0]);
//    par (int i = 1; i < noWorkers; i++) {
//        on tile[1] : rowClient(rowClientInterface[i], i, c_Client[i], c_Client[mod(i + 1, noWorkers)]);
//    }
}

  return 0;
}
